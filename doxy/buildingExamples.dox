/***************************************************************************                                                                                     
*   © 2012,2014 Advanced Micro Devices, Inc. All rights reserved.                                    
*                                                                                    
*   Licensed under the Apache License, Version 2.0 (the "License");   
*   you may not use this file except in compliance with the License.                 
*   You may obtain a copy of the License at                                          
*                                                                                    
*       http://www.apache.org/licenses/LICENSE-2.0                      
*                                                                                    
*   Unless required by applicable law or agreed to in writing, software              
*   distributed under the License is distributed on an "AS IS" BASIS,              
*   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.         
*   See the License for the specific language governing permissions and              
*   limitations under the License.                                                   

***************************************************************************/                                                                                     


/*!
* \page buildingExamples Building Bolt Example Programs
* \tableofcontents
* \section CMake Bolt dynamically generated native build infrastructure
* \subsection overview CMake Overview
* Bolt does not provide Microsoft&r; Visual Studio&r; project files, makefiles, or any other native 
* build infrastructure for its examples.  Instead, the examples directory contains a file named CMakeLists.txt.  
* Bolt uses CMake as a 'master' build system, and native build files, such as Visual Studio projects, nmake makefiles, 
* UNIX makefiles, or Mac xcode projects are GENERATED with CMake.  CMake is very similar to the autoconf tool
* 'configure', except that it is cross-platform. <br><i><b>NOTE:</b> With CMAKE the native OS build files are 
* GENERATED, so changes made to the native build files are overwritten the next time cmake runs.</i>

* CMake is freely available for download on the web from:\n
* <a class="external" href="http://www.cmake.org/">http://www.cmake.org/</a>

* \subsection clDependencies OpenCL&tm; Dependencies
* Bolt's OpenCL&tm; projects have a dependency on the AMD APP SDK and the AMD OpenCL&tm; runtime provided by the Catalyst &tm; drivers.  
* OpenCL&tm; is regarded as a cross-platform, vendor-neutral API and AMD is using C++ kernel template
* features found in the AMD OpenCL&tm; implementation that to date are not found in other vendor implementations.  
* During its configuration, CMake requires an environment variable to find the root of the OpenCL&tm; installation.   
* Provide this by defining the environment variable <b>AMDAPPSDKROOT</b> with the path to the root 
* of the OpenCL&tm; SDK, typically <tt>'C:/Program Files (x86)/AMD APP'</tt> on Windows &reg; 64-bit machines.  This environment
* variable is automatically defined by the Catalyst &tm; installer; so, in most circumstances, no additional work is needed.  
* A more vendor-neutral environment variable is <b>OPENCL_ROOT</b>, but it is not defined by the 
* Catalyst &tm; installer.
* \image html opencl_environment_variable2.png "Environment variable setup screen"
* \image html opencl_environment_variable.png "Environment variable setup screen"
* <br> <b> NOTE </b>: On <b> Linux &reg; </b>, set the environment variable by <tt> 'export OPENCL_ROOT = /opt/AMDAPP/' </tt>

* CMake ships with several interfaces to help a developer generate native build files.
* CMake has a GUI interface called cmake-gui that incorporates the traditional point-and-click conventions of buttons, 
* list boxes, and search boxes.  For CLI-based sytems (including CMD from Windows &reg;), CMake has a native command-line 
* executable (the GUI is just a wrapper around the command line).  The command line 
* executable is useful, even in Windows &reg;, for scripting purposes, such as might be used with automated and continuous 
* build systems.

* \section config CMake Bolt Configuration
* Once installed, the easiest interface for Linux &reg; or Windows &reg; or X-windows &reg; is the CMake GUI program <b> 'cmake-gui' </b>.
* The terminal applications cmake.exe and ccmake.exe (based on curses library) are  
* easy to learn.  CMake automates the creation of build
* environments in a cross-platform manner, generating native build files for each respective platform.
* When launched, it inspects the host computer and searches for all tools, SDKs, libraries, and code necessary to
* build the project.  Once CMake-gui is launched, a configuration window appears with two text boxes on the top.
* \image html cmake.examples.blank.png "Initial cmake-gui screen"

* For this example, Bolt has been installed from from a .zip file on the local machine at 
* <tt>C:/code/bolt</tt>.  In this document, it is called <b>BOLT_ROOT</b>.
* Either click the 'browse source...' button, and navigate to the <b>BOLT_ROOT/examples</b> directory, or manually type 
* the path into the textbox.  Note that the path in the 'source code' text box contains the root-level 
* CMakeLists.txt file for the example projects.  The directory we type select for, <tt>'Where to build the binaries:'</tt>,
* can go anywhere on the hard drive, but should NOT be in a directory that contains source code.  
* This makes it easy to cleanly rebuild projects by deleting the binaries directory.  Each target generator 
* (picure below) must have its own binaries directory: do not mix Visual Studio 2010 binaries with Visual 
* Studio 2012 binaries.  The advantage of out-of-source builds are numerous, and are documented in  
* <a class="external" href="http://www.cmake.org/Wiki/CMake_FAQ#Out-of-source_build_trees">CMAKE FAQ</a>.  For example, 
* for a debug configuration with an NMake generator, a directory such as <b>BOLT_ROOT/examples</b>/bin/nMakeDebug can
* exist.  All generated build files and all the binary intermediate object files are built in this path.  Generated 
* files are kept seperat from source files in a similar concept to what Autotools does for Linux &reg; with configure scripts.  
* After setting the build directory, click the 'Generate' button near the bottom of the main window.  
* A new window appears to prompt what type of generator to use.
* \image html cmake.pick.generator.png "List of cmake generators"

* In the example above, 'Visual Studio 11 Win64' generator is selected.  The selected build directory should be
* descriptive of the generator used; otherwise, it is easy to start over (delete the binaries directory).  
* <b> On Linux &reg;</b>, choose the Unix Makefiles option as generator.
* After selecting the generator, CMake examines the system, finding all project dependencies and properties, 
* which appear red in the properties box.
* \image html cmake.examples.first.configure.png "Cmake system introspection"
*
* While CMake finishes configuring the projects, it prints messages in the output log visible in the bottom textbox 
* within the GUI; this states that CMake found the OpenCL &tm; and Bolt libraries.  If not, cmake prints in red text 
* which libraries or header files are missing. This usually means the environment variables that CMake uses to find 
* dependencies are not set up properly (see \ref clDependencies ).
*
* \subsection startup Startup projects
* <b> On Windows &reg; </b>, after a successful configuration pass, the directory specified initially in the <tt>'Where to build the binaries:'</tt>
* textbox contains an 'Examples.sln' file, which can be opened in the appropriate version of Visual Studio.
* At this point, selecting the 'Build Solution' menu item builds all the samples selected.  By default, Visual
* Studio will have the 'ALL_BUILD' project selected as the \c 'Startup' project.  If a particular sample must be run
* under a debugger, mark it \c 'Startup' by first right-clicking on the project, then selecting 
* <tt>'Set as Startup Project'</tt>.  Debugging then proceeds normally.
*
* <b> On Linux &reg;</b>, open the terminal and change the directory to the one specified initially in the <tt>'Where to build the binaries:'</tt>
* Run make in that directory to build all samples. Indivisual samples can also be built by running make in the corresponding sample directory.
*
* \subsection compDependency Supported compilers
* On <b> Windows &reg; </b>, Bolt currently uses type traits introduced in Visual Studio 2010.  We hope to support additional compilers at some time.  
* On <b> Linux &reg; </b>, GCC is supported. We also hope to add MinGW support in future.
*/
